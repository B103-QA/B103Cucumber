*****Cucumber Kurulumu*****
-Cucumber page object model icin olusturduugmunuz klasorler :
    pages -> page objectler
    runners -> test caseleri run etmek, raporlar eklemek, feature file ile step definitionslari birlestirmek icin
    stepdefinitions -> java kodlari
    utilities -> reusable metotlar, driver, configreader,..
-Cucumber feature klasoru
    Tum feature file lar bu klasore gider
    Tum test caseler gherken dilinde bu klasorde yazilir
-----------19 Subat 2023---------------------------
1. Feature file olustur: ilkfeaturefile.feature
Feature: ilk feature file
  Scenario: TC01_google_iphone_arama
    Given kullanici google gider
    When kullanici iphone için arama yapar
    Then sonuclarda iphone oldugunu dogrular

2. Runner classini run et
3. Console dan missing step definitions lari kopyala
4. stepdefinitions klasorunde GoggleStepDefinitions class i olustur ve oraya yapistir
    @Given("kullanici google gider")
    public void kullanici_google_gider() {
    }
    @When("kullanici iphone için arama yapar")
    public void kullanici_iphone_için_arama_yapar() {
    }
    @Then("sonuclarda iphone oldugunu dogrular")
    public void sonuclarda_iphone_oldugunu_dogrular() {
    }
5. Step definitionslara gerekli java kodlarini yaz
    @Given("kullanici google gider")
    public void kullanici_google_gider() {
        Driver.getDriver().get(ConfigReader.getProperty("google_url"));
    }

    NOTE: ELementleri bulmak icin page paketini kullan
    public GooglePage(){
        PageFactory.initElements(Driver.getDriver(),this);
    }
    @FindBy(xpath = "(//div[@class='QS5gu sy4vM'])[2]")
    public WebElement popUpAccept;
    @FindBy(name = "q")
    public WebElement searchBox;
---------Scenario Outline-----------------
#Scenario -> Scenario Outline
#"" -> "<sutun_ismi>"
#Example kelimesi Scenario Outline dan sonra kullanilmali
#Example verilerin kullanildagi yerdir
----------
Scenario Outline Data Driven Testing icin kullanilir
Yani benzer scenarioyu tekrar tekrar farkli datalarda calistirmak icin kullanilir
Scenario Outline cucumber cok Onemlidir.
Ne zaman birden fazla data ile islem yaparsak, zaman scenario outline kullanabiliriz.
Scenario Outline Excel ile atomasyon yapmaya benzer, tek fark, kullanimi daha kolaydir
++++++++++++++++
EXCEL
1. Config Properties e URL i ekleyin:
app_url=https://www.bluerentalcars.com/
2. Feature file olusturun:
@excel_automation
Feature: excel_login_feature
  Scenario: TC01_musteri_giris_testi
    Given kullanici "customer_info" bilgileri ile giris yapar
3. Step Definitions:
package stepdefinitions;

import io.cucumber.java.en.Given;
import org.junit.Assert;
import pages.HomePage;
import pages.LoginPage;
import utilities.ConfigReader;
import utilities.Driver;
import utilities.ExcelUtils;
import utilities.ReusableMethods;

import java.io.IOException;
import java.util.List;
import java.util.Map;

public class ExcelStepDefinitions {
//Page Objelerini Olustur
    HomePage homePage;
    LoginPage loginPage;
    ExcelUtils excelUtils;
    List<Map<String,String>> excelData;

    @Given("kullanici {string} bilgileri ile giris yapar")
    public void kullanici_bilgileri_ile_giris_yapar(String string) throws IOException {
        String path="./src/test/resources/testdata/mysmoketestdata.xlsx";
        String sayfa = "customer_info";
        excelUtils= new ExcelUtils(path,sayfa);
        excelData=excelUtils.getDataList();
//        NOTE Loop kodunu tamamla
        for(Map<String,String> data : excelData){
//            Ana sayfaya git
            Driver.getDriver().get(ConfigReader.getProperty("app_url"));
            homePage = new HomePage();
            loginPage = new LoginPage();
//            ana sayfa login butonuna tikla
            homePage.firstLogin.click();
            ReusableMethods.waitFor(1);
//            emaili gonder
            loginPage.email.sendKeys(data.get("username"));
            ReusableMethods.waitFor(1);
//            sifre gonder
            loginPage.password.sendKeys(data.get("password"));
            ReusableMethods.waitFor(1);
//            login butonuna tikla
            loginPage.login.click();
            ReusableMethods.waitFor(1);
//            GIRIS YAPILDI.GIRIS YAPILDIGINI VERIFY EDELIM.
//            ID gorunur ise giris basarilidir
            Assert.assertTrue(homePage.userID.isDisplayed());
            ReusableMethods.getScreenshot("Login_Goruntusu");
//            LOG OUT YAPALIM
            homePage.userID.click();
            ReusableMethods.waitFor(1);
            homePage.logOutLink.click();
            ReusableMethods.waitFor(1);
            homePage.OK.click();
            ReusableMethods.waitFor(1);
        }
        Driver.closeDriver();
    }
}

4. HomePage:
package pages;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import utilities.Driver;

public class HomePage {
    public HomePage(){
        PageFactory.initElements(Driver.getDriver(),this);
    }

    @FindBy(xpath = "(//a[@role='button'])[1]")
    public WebElement firstLogin;

    @FindBy(id = "dropdown-basic-button")
    public WebElement userID;

    @FindBy(xpath = "//a[text()='Logout']")
    public WebElement logOutLink;

    @FindBy(xpath = "//button[contains(text(),'OK')]")
    public WebElement OK;


}
5. LoginPage :
package pages;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import utilities.Driver;

public class LoginPage {
    public LoginPage(){
        PageFactory.initElements(Driver.getDriver(),this);
    }

    @FindBy(xpath = "//input[@id='formBasicEmail']")
    public WebElement email;

    @FindBy(xpath = "//input[@id='formBasicPassword']")
    public WebElement password;

    @FindBy(xpath = "//button[text()=' Login']")
    public WebElement login;
}
6. Runner:
package runners;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import org.junit.runner.RunWith;

@RunWith(Cucumber.class)
@CucumberOptions(
        plugin = {
            "pretty",//raporlarin daha ikunakli olmasi icin
            "html:target/default-cucumber-reports.html",
            "json:target/json-reports/cucumber.json",
            "junit:target/xml-report/cucumber.xml"
        },
        monochrome = true,//raporlarin consoleda okunakli sekilde cikmasi icin
        features = "./src/test/resources/features",//features folder path
        glue = {"stepdefinitions","hooks"},   //stepdefinitions path
        tags = "@excel_automation",
        dryRun = false
)
public class Runner {
}
//Bu sinif Test caseleri RUN etmek icin kullanilir
//Ve konfigurasyonlar icin kullanilir
//Runner class, features file lar ile step defitions i birbirile baglar


**********************PARALLEL TEST******************
1. Plugins leri pom.xml e ekle
    *surefire -> parallel test icin
    *failsafe -> parallel testlerde bir testin fail olmasi durumunda diger testler calismaya devam etmesini kolaylastirir
    *cucumber-report -> extra renkli gelismis raporlar verir
2. Coklu runner class olustur. Bu runnerlar farkli scenarilari calistirsin
    *SmokeTestRunner
    *RegressionTestRunner
    *TestRunner
NOTE: Burda kullanilan taglerden en az bir tanesi feature fileda olmali. Aksi takdirde test bulunamaz
3. Terminal/Power Shell/CMD kullanarak, maven kodu ile testleri calistir:
mvn clean verify
mvn clean install

NOTE: Cucumber Reporting Linki :
https://mvnrepository.com/artifact/net.masterthought/cucumber-reporting
https://github.com/damianszczepanik/maven-cucumber-reporting

NOTE: Bilgisayardaki terminal CMD ile tester ayni sekilde calistirilabilir
Bu durumda projenin icine girmemiz gerekir:
cd ABSOLUTE PATH
cd /Users/techproed/IdeaProjects/batch103Cucumber
**********SPARK REPORTS***********
1.resources klasorunde extent-config.xml
<?xml version="1.0" encoding="UTF-8"?>
<extentreports>
    <configuration>
        <!-- report theme -->
        <!-- standard, dark -->
        <theme>dark</theme>

        <!-- document encoding -->
        <!-- defaults to UTF-8 -->
        <encoding>UTF-8</encoding>

        <!-- protocol for script and stylesheets -->
        <!-- defaults to https -->
        <protocol>http</protocol>

        <!-- title of the document -->
        <documentTitle>My Spark Reports</documentTitle>

        <!-- report name - displayed at top-nav -->
        <reportName>Smoke Test Report</reportName>

        <!-- location of charts in the test view -->
        <!-- top, bottom -->
        <testViewChartLocation>bottom</testViewChartLocation>

        <!-- custom javascript -->
        <scripts>

            <![CDATA[
$(document).ready(function() {
});
]]>
        </scripts>
        <!-- custom styles -->
        <styles>
            <![CDATA[
]]>
        </styles>
    </configuration>
</extentreports>
2.resources klasorunde extent.properties
#HTML REPORT
extent.reporter.spark.start=true
extent.reporter.spark.out=test-output/SparkReport/Spark.html
extent.reporter.spark.config=src/test/resources/extent-config.xml

#PDF REPORT
extent.reporter.pdf.start=true
extent.reporter.pdf.out=test-output/PdfReport/ExtentPdf.pdf

#SCREENSHOT PATH
screenshot.dir=test-output/
screenshot.rel.path=../

extent.reporter.spark.vieworder=dashboard,test,category,exception,author,device,log

systeminfo.os=Mac
#systeminfo.os=Windows
3. Spark report dependency pom a ekle:  https://mvnrepository.com/artifact/tech.grasshopper/extentreports-cucumber7-adapter/1.6.0
        <!-- https://mvnrepository.com/artifact/tech.grasshopper/extentreports-cucumber7-adapter -->
        <dependency>
            <groupId>tech.grasshopper</groupId>
            <artifactId>extentreports-cucumber7-adapter</artifactId>
            <version>1.6.0</version>
        </dependency>
4. Spark report plugin i Runner a ekle
"com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:"

RUNNER CLASS:
package runners;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import org.junit.runner.RunWith;

@RunWith(Cucumber.class)
@CucumberOptions(
        plugin = {
                "pretty",//raporlarin daha ikunakli olmasi icin
                "html:target/default-cucumber-reports.html",
                "json:target/json-reports/cucumber.json",
                "junit:target/xml-report/cucumber.xml",
                "rerun:target/failed_scenarios.txt",
                "com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:"
        },
        monochrome = true,//raporlarin consoleda okunakli sekilde cikmasi icin
        features = "./src/test/resources/features",//features folder path
        glue = {"stepdefinitions","hooks"},   //stepdefinitions path
        tags = "@failed_scenario",
        dryRun = false
)
public class Runner {
}
















